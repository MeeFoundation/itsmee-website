---

export interface Props {
  size?: Size;
  labelPosition?: LabelPosition;
  error?: string;
  passSecurity?: PassStrength;
  helperText?: string;
  required?: boolean;
}

export type Size = 'Small' | 'Medium' | 'Large';

export type LabelPosition = 'Edge' | 'Inside' | 'Outside';

export enum PassStrength {
  'weak' = 1,
  'medium',
  'strong',
  'fortress',
}

const heightSizeStyles = {
  Edge: {
    Small: 'h-7',
    Medium: 'h-9',
    Large: 'h-11',
  },
  Inside: {
    Small: 'h-11',
    Medium: 'h-12',
    Large: 'h-14',
  },
  Outside: {
    Small: 'h-7',
    Medium: 'h-9',
    Large: 'h-11',
  },
};

const labelStyles = {
  Edge: `left-10 peer-focus:-top-2 peer-focus:left-2 peer-focus:text-xs peer-focus:bg-white peer-focus:px-1 peer-focus:leading-3`,
  Inside: `left-10 peer-focus:text-xs peer-focus:top-1 peer-focus:left-10`,
  Outside: `-top-6 left-0 peer-focus:-top-6 peer-focus:left-0`,
};

const progressBarColor = ['bg-error-500', 'bg-warning-500', 'bg-brand-500', 'bg-success-500'];
const passStrengthTextColor = ['text-error-700', 'text-warning-700', 'text-grey-800', 'text-success-700'];

const iconSizeStyles = {
  Small: 'text-sm',
  Medium: 'text-base',
  Large: 'text-xl',
};

const inputTextStyles: { [key: string]: string } = {
  Small: 'text-xs tracking-normal',
  Medium: 'text-sm tracking-normal',
  Large: 'text-base tracking-wide',
};

const focusedInput = {
  Edge: '',
  Inside: 'mt-4',
  Outside: '',
};

const {
  size = 'Medium',
  labelPosition = 'Edge',
  error,
  passSecurity,
  helperText = '',
  required = true,
} = Astro.props;

---
<div class:list={['password-container w-full', labelPosition === 'Edge' ? 'mt-1' : labelPosition === 'Outside' ? 'mt-2' : '']}>
  <div
    tabindex={0}
    data-error={`${!!error}`}
    class:list={[
    'px-3 flex justify-between items-center relative border rounded-xl transition-all',
    heightSizeStyles[labelPosition][size],
    error ? 'border-error-700' : 'border-grey-300',
    ]}
  >
    <i
      class:list={['bi bi-shield-lock text-grey-500', iconSizeStyles[size]]}
    />
    <input
    id='password'
    required={required}
    type="password"
    class:list={[
    'mx-2 w-full peer outline-0 transition-all text-grey-800',
    inputTextStyles[size],
    focusedInput[labelPosition],
  ]}
  />
    <label
      data-position={labelPosition}
      data-size={size}
      for='password'
      class:list={[
        'font-sans absolute transition-transform',
        error ? ' text-error-700 peer-focus:text-error-700' : 'text-grey-500 peer-focus:text-grey-800',
      labelStyles[labelPosition],

      inputTextStyles[size],
      ]}
    >
      Password*
    </label>

    {error && (
      <i
        class:list={["mr-2 bi bi-exclamation-circle text-error-700", iconSizeStyles[size]]}
      />
    )}
    <div class="eye-container">
      <i
        class:list={['bi bi-eye text-grey-500', iconSizeStyles[size]]}
      />
      <i
          class:list={['bi bi-eye-slash text-grey-500 hidden', iconSizeStyles[size]]}
      />
      </div>
  </div>
  <div class='flex justify-between mt-2'>
    {new Array(4).fill(0).map((_, index) => (
      <div
        class:list={["h-0.75 w-6/25",
          passSecurity && Number(passSecurity) >= index + 1 ? progressBarColor[passSecurity - 1] : 'bg-grey-200',
          ]}
      />
    ))}
  </div>
  <div class="flex justify-between">
    {error ?
      <div class="text-error-700 text-xs mt-1">{error}</div> :
      helperText ?
        <div class="text-grey-500 text-xs mt-1">{helperText}</div> : <div />}
    {passSecurity &&
      <div class={`text-xs mt-1 ${passSecurity? passStrengthTextColor[passSecurity - 1] : 'text-grey-500'}`}>
        {PassStrength[passSecurity]}
      </div>
    }
  </div>
</div>
<script>
const activeLabelStyles: { [key: string]: string } = {
  Edge: `-top-2 left-2 text-xs bg-white px-1 leading-3`,
  Inside: `left-10 text-xs top-1 left-10`,
  Outside: `-top-6 left-0 -top-6 left-0`,
};

const defaultLabelStyles: { [key: string]: string } = {
  Edge: `left-10`,
  Inside: `left-10`,
  Outside: `-top-6 left-0`,
};

const inputTextStyles: { [key: string]: string } = {
  Small: 'text-xs tracking-normal',
  Medium: 'text-sm tracking-normal',
  Large: 'text-base tracking-wide',
};

  const elemContainers = document.querySelectorAll(".password-container");

  elemContainers.forEach((container) => {
    const eyeContainer = container.querySelector(".eye-container");
    const eyeElem = container.querySelector(".bi-eye");
    const eyeSlashElem = container.querySelector(".bi-eye-slash");
    const input = container.querySelector('input');
    const label = container.querySelector('label');
    const inputContainer = container.querySelector('div[data-error]') as HTMLElement;

    if (eyeContainer) {
      eyeContainer.addEventListener('click', () => {
        const input = container.querySelector('input');
        if (input && input.type === 'password') {
          input.type = 'text';
          eyeElem && eyeElem.classList.add('hidden');
          eyeSlashElem && eyeSlashElem.classList.remove('hidden');
        } else if (input) {
          input.type = 'password';
          eyeSlashElem && eyeSlashElem.classList.add('hidden');
          eyeElem && eyeElem.classList.remove('hidden');
        }
      });
    }

    if (input) {
      input.addEventListener('change', (e) => {
        if (e.target && (e.target as HTMLInputElement).value && label) {
          if (label && label.dataset.position) {
            label.className = `${label.className} ${activeLabelStyles[label.dataset.position]}`;
          }
        } else {
          if (label && label.dataset.position) {
            activeLabelStyles[label.dataset.position].split(' ').forEach((style) => {
            label && label.classList.remove(style);
            if (label && label.dataset.position) {
              label.className = `${label.className} ${defaultLabelStyles[label.dataset.position]}`;
            }
          });
        }
        if (label && label.dataset.size) {
          inputTextStyles[label.dataset.size].split(' ').forEach((style) => {
            label && label.classList.add(style);
          });
        }
      }
    })}


    if (inputContainer) {
      inputContainer.addEventListener('focusin', () => {
        if (inputContainer && (inputContainer).dataset) {
          if (inputContainer.dataset.error === 'true') {
            inputContainer.classList.add('shadow-button-danger');
          } else {
            inputContainer.classList.add('shadow-button');
            inputContainer.classList.replace('border-grey-300', 'border-brand-500');
          }
        }
      });

      inputContainer.addEventListener('focusout', () => {
        if (inputContainer && inputContainer.dataset) {
          if (inputContainer.dataset.error === 'true') {
            inputContainer.classList.remove('shadow-button-danger');
        } else {
          inputContainer.classList.remove('shadow-button');
          inputContainer.classList.replace('border-brand-500', 'border-grey-300');
        }
      }
      });
    }
  });
</script>
