---
import { Button, Input, ButtonLink, AuthForm } from "mee-components";
import PasswordInput from "@components/PasswordInput.astro";
import Layout from "@layouts/Layout.astro";
---

<Layout title="Sign In">
  <main
    class="flex h-screen w-screen flex-col items-center justify-center bg-auth-gradient"
  >
    <div
      class="relative z-50 flex h-full max-w-130 flex-col items-center justify-center gap-6 p-6"
    >
      <div
        class="flex flex-col items-center justify-between rounded-2xl bg-white px-0 pb-0 pt-16 shadow-2 md:w-130"
      >
        <AuthForm
          id="first-form"
          title='The <mark class="whitespace-nowrap">human-centered</mark><br /> user experience'
          subtitle="Login to your Mee account."
          formId="sign-in-form"
        >
          <Input
            className="w-full"
            id="email"
            type="email"
            label="Connect with email address"
            size="lg"
            labelPosition="inside"
            autocomplete="off"
            required
          />

          <Button id="login-button" type="button" className="w-full"
            >Log in</Button
          >
          <ButtonLink
            id="join"
            href="/sign-up"
            buttonType="primary"
            style="outlined"
            className="w-full border-none">Sign up</ButtonLink
          >
        </AuthForm>
        <AuthForm
          id="second-form"
          title="Confirm your identity"
          subtitle="Enter your password to confirm your identity."
          formId="sign-in-form-2"
          className="hidden"
        >
          <PasswordInput
            className="w-full"
            id="password"
            label="Password"
            placeholder="Enter a password"
            required
            showRestorePassword
          />
          <Button id="connect" type="button" className="w-full">Connect</Button>
          <Button
            id="go-back"
            type="button"
            buttonType="primary"
            style="outlined"
            className="w-full border-none">Go back</Button
          >
        </AuthForm>
        <div
          class="w-full rounded-b-2xl border-t border-solid border-t-grey-200 bg-grey-50 px-12 py-6 text-center text-xs leading-4 tracking-0.02 text-grey-600"
          id="policy"
        >
          By continuing, you agree to itsmee.org{" "}<a
            class="cursor-pointer text-brand-700 underline"
            href="https://mee.foundation/privacy-policy/"
            target="_blank">Privacy Policy</a
          >
        </div>
      </div>
      <div
        class="text-center text-xs leading-4 tracking-0.02 text-yellow-800"
        id="hosted-by"
      >
        Hosted by <a
          href="https://mee.foundation/"
          target="_blank"
          class="text-brand-700 underline">The Mee Foundation</a
        >, a non-profit that works on behalf of all Mee users and never shares
        your data with anyone.
      </div>
    </div>
  </main>
</Layout>

<script>
  import config from "@config";

  const signInForm = document.getElementById(
    "sign-in-form"
  ) as HTMLFormElement | null;
  const signInForm2 = document.getElementById(
    "sign-in-form-2"
  ) as HTMLFormElement | null;
  const loginButton = document.getElementById("login-button");
  const firstForm = document.getElementById("first-form");
  const secondForm = document.getElementById("second-form");
  const goBackButton = document.getElementById("go-back");
  const connectButton = document.getElementById("connect");
  const policyBlock = document.getElementById("policy");
  const hostedByBlock = document.getElementById("hosted-by");
  const data = { email: "", password: "" };

  const changeForm = (
    activeForm: HTMLElement | null,
    nextForm: HTMLElement | null,
    showPolicy?: boolean
  ) => {
    activeForm?.classList.remove("flex");
    activeForm?.classList.add("hidden");
    nextForm?.classList.add("flex");
    nextForm?.classList.remove("hidden");
    if (showPolicy) {
      policyBlock?.classList.remove("hidden");
      hostedByBlock?.classList.remove("hidden");
    } else {
      policyBlock?.classList.add("hidden");
      hostedByBlock?.classList.add("hidden");
    }
  };
  const submitForm1 = (inputs: NodeListOf<HTMLInputElement>) => {
    const emailData = Array.from(inputs).reduce(
      (acc, input) => ({ ...acc, [input.id]: input.value }),
      { email: "" }
    );
    data.email = emailData.email;
    if (data.email) {
      changeForm(firstForm, secondForm);
    }
  };
  const submitForm2 = async (inputs: NodeListOf<HTMLInputElement>) => {
    window.location.href = "/connections/";
    const passwordData = Array.from(inputs).reduce(
      (acc, input) => ({ ...acc, [input.id]: input.value }),
      { password: "" }
    );
    data.password = passwordData.password;
    if (data.password && data.email) {
      try {
        const { auth_token } = await fetch(
          config.backendUrl + "/api/v1/users/login",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              email: data.email,
              password: data.password,
            }),
          }
        ).then((r) => r.json());

        console.log("auth_token", auth_token);
      } catch (e) {
        console.error(e);
      }
    }
  };

  if (signInForm) {
    const inputs = signInForm.querySelectorAll("input");
    loginButton?.addEventListener("click", () => {
      submitForm1(inputs);
    });
    signInForm.onsubmit = (e) => {
      e.preventDefault();
      submitForm1(inputs);
    };
  }

  if (signInForm2) {
    const inputs = signInForm2.querySelectorAll("input");
    goBackButton?.addEventListener("click", () => {
      changeForm(secondForm, firstForm, true);
    });
    connectButton?.addEventListener("click", async () => {
      submitForm2(inputs);
    });
    signInForm2.onsubmit = (e) => {
      e.preventDefault();
      submitForm2(inputs);
    };
  }
</script>
