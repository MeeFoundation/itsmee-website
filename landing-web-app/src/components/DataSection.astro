---
import { ButtonLink } from "mee-components";
const data = [
  {
    title: "Putting you in control of your data relationships",
    subtitle: "Mee is about",
    description:
      "Mee represents your relationships with other people and companies as a set of data sharing connections. When you create a connection, you can chose what (if any) information is accessible to the other party, and for how long.",
    image: "/images/personal-data-controller.svg",
    imageDark: "/images/personal-data-controller-dark.svg",
    link: "",
    linkTitle: "",
    button: false,
    class: "first-element",
  },
  {
    title: "Contact sharing with friends and family",
    subtitle: "Mee is about",
    description:
      "If you wish a family member to always have your correct home address (and you to have theirs). Use the Mee app to send them a connection request link. After they tap the link, Mee will open and they can accept your connection request. After they do you’ll both always have each other’s home address.",
    image: "/images/personal-data-storage.svg",
    imageDark: "/images/personal-data-storage-dark.svg",
    link: "",
    linkTitle: "",
    button: false,
  },
  {
    title: "Auto-update your account profiles on websites and apps",
    subtitle: "Mee is about",
    description:
      "If you create a connection with a Mee-compatible company, for as long as you with they can use the latest information from your Mee. When you update it, they automatically update their database.",
    image: "/images/limits-app.svg",
    imageDark: "/images/limits-app-dark.svg",
    link: "",
    linkTitle: "",
    button: false,
    class: "last-element",
  },
];
---

<section class="data-container flex w-full max-w-7xl flex-col">
  <div class="data-container-start mt-8 w-full lg:mt-20"></div>
  <div
    class="flex h-full w-full flex-col items-center justify-center gap-20 px-5 lg:gap-64"
  >
    {
      data.map((item) => (
        <div
          class="data-item flex w-full flex-col gap-4 lg:flex-row lg:gap-0"
          class:list={item.class}
        >
          <div class="data-item-block-container relative flex items-center lg:w-1/2">
            <div class="data-item-block relative flex items-center justify-start transition-opacity duration-100 lg:fixed lg:top-0 lg:-z-1 lg:h-screen lg:opacity-0">
              <div class="flex flex-col items-center justify-center gap-4 lg:items-start">
                <div>
                  <div class="test-xl text-center text-grey-500 md:text-left md:text-2xl dark:text-grey-400">
                    {item.subtitle}
                  </div>
                  <div class="title text-center text-3xl font-bold md:text-left md:text-5xl">
                    {item.title}
                  </div>
                </div>
                <div class="text-center md:text-left dark:text-grey-50">
                  {item.description}
                </div>
                {item.link && item.button && (
                  <ButtonLink href={item.link} size="xxl">
                    {item.linkTitle}
                  </ButtonLink>
                )}
                {item.link && !item.button && (
                  <a
                    class="block w-full text-center text-lg leading-relaxed text-brand-600 underline md:text-left md:text-2xl dark:text-brand-300"
                    href={item.link}
                  >
                    {item.linkTitle} <i class="bi bi-arrow-right" />
                  </a>
                )}
              </div>
            </div>
          </div>
          <div class="flex items-center lg:w-1/2">
            <div class="image-block flex w-full items-center">
              <img class="w-full dark:hidden" src={item.image} />
              <img class="hidden w-full dark:block" src={item.imageDark} />
            </div>
          </div>
        </div>
      ))
    }
  </div>
  <div class="data-container-end h-40"></div>
</section>
<script>
  const dataItems = document.querySelectorAll(".data-item");
  const dataContainer = document.querySelector(".data-container");
  const dataContainerStart = document.querySelector(".data-container-start");
  const dataContainerEnd = document.querySelector(".data-container-end");
  const firstElement = dataContainer?.querySelector(".first-element");

  function getOpacity(element: Element) {
    var rect = element.getBoundingClientRect();
    const windowHeight =
      window.innerHeight || document.documentElement.clientHeight;
    const windowCenter = windowHeight / 2;
    const imageTopCenter = rect.top + rect.height / 5;
    const imageBottom = rect.bottom;
    const imageBottomCenter = rect.bottom - rect.height / 5;
    const opacityOffset = rect.height / 5;

    if (
      imageTopCenter >= 0 &&
      imageTopCenter <= windowCenter &&
      imageBottomCenter > windowCenter
    ) {
      return 1;
    } else if (rect.top <= windowCenter && imageBottomCenter > windowCenter) {
      return (windowCenter - imageTopCenter + opacityOffset) / opacityOffset;
    } else if (
      imageTopCenter <= windowCenter &&
      imageBottomCenter <= windowCenter &&
      imageBottom > windowCenter
    ) {
      return (
        2 - (windowCenter - imageBottomCenter + opacityOffset) / opacityOffset
      );
    }
    return 0;
  }

  const addBlur = (start: Element, end: Element, firstElement: Element) => {
    const startRect = start.getBoundingClientRect();
    const endRect = end.getBoundingClientRect();
    const firstRect = firstElement.getBoundingClientRect();
    const windowHeight =
      window.innerHeight || document.documentElement.clientHeight;
    const windowCenter = windowHeight / 2;

    if (firstRect.top <= windowCenter && endRect.bottom > 200) {
      dataContainer?.classList.add("data-container-before");
    } else {
      dataContainer?.classList.remove("data-container-before");
    }

    if (startRect.top <= windowHeight && endRect.bottom > windowHeight) {
      dataContainer?.classList.add("data-container-after");
    } else {
      dataContainer?.classList.remove("data-container-after");
    }
  };

  const isLastBlockAfterCenter = (
    element: HTMLElement,
    currentBlock: Element
  ) => {
    if (currentBlock.classList.contains("last-element")) {
      const center =
        element.offsetTop -
        (window.innerHeight / 2 - element.clientHeight / 2) +
        110;
      if (window.scrollY >= center) {
        return true;
      }
    }
    return false;
  };
  const isFirstBlockBeforeCenter = (
    element: HTMLElement,
    currentBlock: Element
  ) => {
    if (currentBlock.classList.contains("first-element")) {
      const center =
        element.offsetTop -
        (window.innerHeight / 2 - element.clientHeight / 2) +
        107;
      if (window.scrollY <= center) {
        return true;
      }
    }
    return false;
  };

  const checkCurrentBlock = () => {
    if (window.innerWidth >= 1024) {
      dataItems.forEach((currentBlock) => {
        const itemBlock = currentBlock?.querySelector(".data-item-block") as
          | HTMLElement
          | undefined;
        const itemBlockContainer = currentBlock?.querySelector(
          ".data-item-block-container"
        ) as HTMLElement | undefined;
        const imageBlock = currentBlock?.querySelector(".image-block") as
          | HTMLElement
          | undefined;
        if (imageBlock && itemBlockContainer) {
          const width = itemBlockContainer.getBoundingClientRect().width;
          const opacity = getOpacity(imageBlock);
          const lastAfterCenter = isLastBlockAfterCenter(
            imageBlock,
            currentBlock
          );
          const firstBeforeCenter = isFirstBlockBeforeCenter(
            imageBlock,
            currentBlock
          );
          if (itemBlock) {
            if (lastAfterCenter || firstBeforeCenter) {
              itemBlock.style.opacity = "1";
              itemBlock.classList.remove("lg:fixed", "lg:h-screen");
            } else {
              itemBlock.style.opacity = opacity.toString();
              itemBlock.classList.add("lg:fixed", "lg:h-screen");
            }

            itemBlock.style.width = width + "px";

            if (lastAfterCenter || firstBeforeCenter) {
              itemBlock.style.zIndex = "0";
            } else if (opacity > 0) {
              itemBlock.style.zIndex = "2";
            } else {
              itemBlock.style.zIndex = "-1";
            }
          }
        }
      });
      if (dataContainerStart && dataContainerEnd && firstElement) {
        addBlur(dataContainerStart, dataContainerEnd, firstElement);
      }
    }
  };

  const setDefaultOpacityOnResize = () => {
    if (window.innerWidth < 1024) {
      dataItems.forEach((currentBlock) => {
        const itemBlock = currentBlock?.querySelector(".data-item-block") as
          | HTMLElement
          | undefined;
        if (itemBlock) {
          itemBlock.style.opacity = "";
          itemBlock.style.width = "";
          itemBlock.style.zIndex = "";
          itemBlock.classList.add("lg:fixed", "lg:h-screen");
        }
      });
      dataContainer?.classList.remove("data-container-before");
      dataContainer?.classList.remove("data-container-after");
    }
  };

  window.addEventListener("scroll", checkCurrentBlock);
  window.addEventListener("resize", checkCurrentBlock);
  window.addEventListener("resize", setDefaultOpacityOnResize);
  checkCurrentBlock();
</script>

<style is:global>
  .title {
    background: linear-gradient(90deg, #0f172a 0%, #4f868e 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    text-fill-color: transparent;
  }
  .dark .title {
    background: linear-gradient(90deg, #f8fafc 0%, #4f868e 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    text-fill-color: transparent;
  }

  .data-container-before::before {
    content: "";
    position: fixed;
    z-index: 1;
    right: 0px;
    top: 68px;
    height: 20%;
    width: 100%;
    background: linear-gradient(
      180deg,
      rgba(255, 255, 255, 1) 0%,
      rgba(255, 255, 255, 0.9) 15%,
      rgba(255, 255, 255, 0.8) 40%,
      rgba(255, 255, 255, 0) 100%
    );
  }

  .data-container-after::after {
    content: "";
    position: fixed;
    z-index: 1;
    right: 0px;
    bottom: 0px;
    height: 20%;
    width: 100%;
    background: linear-gradient(
      0deg,
      rgba(255, 255, 255, 1) 0%,
      rgba(255, 255, 255, 0.9) 15%,
      rgba(255, 255, 255, 0.8) 40%,
      rgba(255, 255, 255, 0) 100%
    );
  }

  .dark .data-container-before::before {
    background: linear-gradient(
      180deg,
      rgba(2, 6, 23, 1) 0%,
      rgba(2, 6, 23, 0.9) 15%,
      rgba(2, 6, 23, 0.8) 40%,
      rgba(2, 6, 23, 0) 100%
    );
  }

  .dark .data-container-after::after {
    background: linear-gradient(
      0deg,
      rgba(2, 6, 23, 1) 0%,
      rgba(2, 6, 23, 0.9) 15%,
      rgba(2, 6, 23, 0.8) 40%,
      rgba(2, 6, 23, 0) 100%
    );
  }
</style>
